buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.135'
	}
}

plugins {
	id 'babric-loom' version '1.4.+'
	id 'java'
	id "com.modrinth.minotaur" version "2.+"
}

group = project.mod_group
archivesBaseName = project.mod_name
version = project.mod_version

loom {
	gluedMinecraftJar()
	noIntermediateMappings()
	customMinecraftManifest.set("https://github.com/Turnip-Labs/bta-manifest-repo/releases/download/v${project.bta_version}/${project.bta_version}.json")
}

dependencies {
	minecraft "bta-download-repo:bta:${project.bta_version}"
	mappings loom.layered() {}

	if(findProject(":catalyst") == null){
		include(project(":"))
		include(rootProject.project("energy"))
		include(rootProject.project("fluids"))
		include(rootProject.project("multiblocks"))
		include(rootProject.project("effects"))
		include(rootProject.project("multipart"))
	} else {
		include(project(":catalyst"))
		include(project(":catalyst").project("energy"))
		include(project(":catalyst").project("fluids"))
		include(project(":catalyst").project("multiblocks"))
		include(project(":catalyst").project("effects"))
		include(project(":catalyst").project("multipart"))
	}

}

processResources {
	inputs.property "version", project.mod_version

	filesMatching("fabric.mod.json") {
		expand "version": project.mod_version
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.release.set 8
}

remapJar {
	destinationDirectory.set(file("$parent.projectDir/jars"))
	archiveVersion.set(archiveVersion.get()+"-${bta_version}")
}

modrinth {
	token = modrinthToken
	projectId = "catalyst" // This can be the project ID or the slug. Either will work!
	versionNumber = project.mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
	versionType = "release" // This is the default -- can also be `beta` or `alpha`
	uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = ["b1.7.3"] // Must be an array, even with only one version
	loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	changelog = Files.readString(java.nio.file.Path.of("${project.projectDir}/CHANGELOG.md"))
}


import net.fabricmc.loom.task.RemapJarTask
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

import java.nio.file.Files

tasks.register('github') {
	doLast {

		List<RemapJarTask> ts = List.of(
			rootProject.project(":catalyst").project("energy").remapJar as RemapJarTask,
			rootProject.project(":catalyst").project("fluids").remapJar as RemapJarTask,
			rootProject.project(":catalyst").project("multiblocks").remapJar as RemapJarTask,
			rootProject.project(":catalyst").project("effects").remapJar as RemapJarTask,
			rootProject.project(":catalyst").project("multipart").remapJar as RemapJarTask
		)

		def github = GitHub.connectUsingOAuth(githubToken as String)
		def repository = github.getRepository("MartinSVK12/catalyst")

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("$version")
		releaseBuilder.body(Files.readString(java.nio.file.Path.of("${rootProject.projectDir}/CHANGELOG.md")))
		releaseBuilder.commitish("bta")
		releaseBuilder.prerelease(true)

		def release = releaseBuilder.create()
		release.uploadAsset(project.file(remapJar.getArchiveFile().get().getAsFile()),"application/java-archive")
		if(findProject(":catalyst") != null){
			ts.forEach {
				release.uploadAsset(project.file(it.getArchiveFile().get().getAsFile()),"application/java-archive")
			}
		}
	}
}

tasks.register('deploy'){
	description "Publish mod to modrinth and github."
	group "publishing"
	dependsOn modrinth
	dependsOn github
}
